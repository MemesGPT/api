[tool.poetry]
name = "memes-gpt"
version = "0.1.0"
description = ""
authors = ["Punches <punche@yandex.ru>"]
readme = "README.md"


[tool.poetry.dependencies]
python = "^3.11"
orjson = "^3.9.10"
faker = "^24.0.0"
gigachain = "^0.1.10"
gigachat = "^0.1.19"
uvicorn = "^0.23.0"
gigachain-cli = "^0.0.21"
fastapi = "0.99.1"
openai = "^1.13.3"
opencv-python = "^4.9.0.80"
scikit-image = "^0.22.0"
langchain-core = "^0.1.32"
langchain-community = "^0.0.28"
langchain-openai = "^0.0.8"
sqlalchemy = "^2.0.29"
asyncpg = "^0.29.0"
aiohttp = "^3.9.3"
aiofiles = "^23.2.1"


[tool.poetry.group.dev.dependencies]
ruff = "^0.3.1"
mypy = "^1.8.0"
pytest = "^8.1.1"
pytest-asyncio = "^0.23.5.post1"
pytest-ruff = "^0.3.1"
types-aiofiles = "^23.2.0.20240331"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
exclude = [
    ".idea",
    ".git",
    ".venv",
]
fix = true
unsafe-fixes = false
line-length = 120
lint.select = ["ALL"]
lint.ignore = [
    "D1", "D203", "D213", "FA102", "ANN101", "RUF001", "RUF002", "RUF003", "FIX002", "A003", "E712", "PGH003", "ARG002",
    "ANN102", "S101"
]

[tool.ruff.format]
quote-style = "double"

[tool.ruff.lint.isort]
no-lines-before = ["standard-library", "local-folder"]
known-local-folder = []

[tool.ruff.lint.extend-per-file-ignores]
"tests/*.py" = ["ANN401", "S101", "S311"]

[tool.ruff.lint.flake8-type-checking]
runtime-evaluated-decorators = ["pydantic.validate_call", "attrs.define"]
runtime-evaluated-base-classes = ["pydantic.BaseModel"]

[tool.ruff.flake8-bugbear]
extend-immutable-calls = ["fastapi.Depends", "fastapi.params.Depends", "fastapi.Query", "fastapi.params.Query"]

[tool.mypy]
mypy_path = "./"
python_version = "3.11"
ignore_missing_imports = true
exclude = ".venv"
plugins = ["pydantic.mypy"]

[tool.pytest.ini_options]
minversion = "7.4"
addopts = "-vs -q"

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true
